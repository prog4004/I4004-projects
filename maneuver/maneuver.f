\ chdir Documents\win32forth\Win32Forth6.14.04\I4004
\ intercep
\ CLOSEST POINT OF APPROACH
\ TITLE
\ A MICROCOMPUTER SOLUTION TO
\  MANEUVERING BOARD PROBLEMS
\ FORM NPS MONTEREY ARCHIVES
\ CODE BY KENNETH HARPER KERNS
\
\ ERROR LIGHT IS $40 ANY OUTPUT $F
\ ROM $00 OUT IS BCD VAL F IS OF VALUE IS INVERTED
\  $10 IS KEY STROBE BIT3
\  $00 IS KEY DATA
\ ROM $10 OUT IS CONTROL  BIT 3 IS DP
\          BIT 2 FALLING EDGE IS CLOCK

DECIMAL
0 CONSTANT MANEUVER  \ MARKER
FLOAD ASM4004
FLOAD MNUVR_LBs
0 ORG
  NOP
\ BLANK DISPLAY
 00 RC FIM
 0 LDM
 RB XCH
 $0F LDM
 DORAM JMS
\ TURN OFF ERROR LIGHT
 $40 RC FIM
 RC SRC
 0 LDM
 WRR
\ FIRST TIME MAKE SURE KEY NOT ALREADY DOWN
 CHECKNOSTROBE JUN
LBL CHECKSTROBE  \ 00F
 DISPLAY JMS
\ WAIT FOR KEY TO BE DEPRESSED
 $10 RC FIM
 RC SRC
 RDR
 RAL  \ $10 BIT3 IS KEY STROBE
 CHECKSTROBE CARRY INV JCN
\ WAIT FOR KEY TO STOP BOUNCING
 WAIT5 JMS
\ STORE KEY'S 4 BIT DATA
 00 RA FIM \ 01A
 RA SRC
 RDR
 RD XCH  \ KEY DATA IN RD
\ MAKE SURE KEY STILL DOWN, HENCE DATA GOOD
 RC SRC
 RDR
 RAL
 CHECKSTROBE CARRY INV JCN
 R0 XCH  \ HAS SHIFTED $10 INPUT
\ TURN OFF ERROR LIGHT
 $40 RA FIM
 RA SRC
 0 LDM
 WRR
 R0 LD  \ KEY DATA
\ USE DATA BITS AS TABLE INDEX
 KEYTABLE R0 FIM
 RAL
 NUMBERSIDE CARRY INV JCN  \ BIT2=0 IS NUMBER SIDE 04A + INPUT
 R0 INC
 R0 INC               \ MSB +2 FROM 06A + INPUT
LBL NUMBERSIDE  \ 032
 RD LD    \ KEY DATA PORT
 CLC
 RD ADD   \
 DC1 CARRY INV JCN \ CARRY INTO TABLE ADDRESS
 R0 INC            \ IN R0
LBL DC1 \ 038
 CLC
 R1 ADD
 R1 XCH
 DC2 CARRY INV JCN
 R0 INC            \ CARRY INTO R0 AGAIN
\ JUMP INTO TABLE
LBL DC2  \ 03E
 R0 JIN    \ JUMP TO SELECTED KEYBOARD INPUT
\ ALL TABLE ROUYINES RETURN HERE
LBL CHECKNOSTROBE  \ 03F
 DISPLAY JMS
 $10 RC FIM
 RC SRC
\ MAKE SURE KEY HAS BEEN RELEASED
 RDR
 RAL
 CHECKNOSTROBE CARRY JCN
\ IF YES LOOP
 CHECKSTROBE JUN
\ THE TABLE
LBL KEYTABLE  \ 04A
 CHECKNOSTROBE JUN
 NUMBR JUN
 NUMBR JUN
 NUMBR JUN
 NUMBR JUN
 NUMBR JUN
 NUMBR JUN
 NUMBR JUN
 NUMBR JUN
 NUMBR JUN
 CHECKNOSTROBE JUN
 DECIMALN JUN
 CHECKNOSTROBE JUN
 CLEARKEY JUN
 CHECKNOSTROBE JUN
 CHECKNOSTROBE JUN
 NUMBR JUN
 COMPUTE JUN
 OWNSHIP JUN
 COURSE JUN
 SAVED JUN
 SPEED JUN
 RANGE JUN
 BEARING JUN
 TARGETSHIP JUN
 CHECKNOSTROBE JUN
 CPA JUN
 CHECKNOSTROBE JUN
 SECOND JUN
 FIRST JUN
 TIME JUN
 TARGETNUMBER JUN
 RA VALUE BLKTO
 RC VALUE REGTO
 RD VALUE PREGTO
 RB VALUE BLKFM
 R6 VALUE REGFM
 R7 VALUE PREGFM
 R9 VALUE TEMP
\ TO TRANSFER FROM ONE RAM BLOCK TO ANOTHER
LBL BLOCKTRANS  \ 08A
 BLKFM LD
 DCL
 REGFM SRC
 RDM
 TEMP XCH
 BLKTO LD
 DCL
 REGTO SRC
 TEMP LD
 WRM
 PREGFM INC
 BLOCKTRANS PREGTO ISZ
 0 BBL

 R6 VALUE CONTNR
 RB VALUE TARGNR
 RA VALUE BLKCODE
 RC VALUE REGNR
 RD VALUE PREGNR
\ TO CONVERT TARGET NUMBER TO STORAGE LOCATION
LBL BLOCKSETUP  \ 098
 CLC
 7 LDM
 TARGNR SUB
 BLK1 CARRY JCN
 CMA
 TARGNR XCH
 2 LDM
 BLKCODE XCH
 BLKJOIN JUN

LBL BLK1 \ 0A3
 1 LDM
 BLKCODE XCH
LBL BLKJOIN  \ 0A5
 TARGNR LD
 TARGNR ADD
 CONTNR ADD
 REGNR XCH
 0 LDM
 PREGNR XCH
 0 BBL

\ CHANGES F'S TO O'S
LBL UNF  \ 0AC
 RC SRC
 RDM
 CMA
 FOK ZERO INV JCN
 0 LDM
 WRM
LBL FOK  \ 0B3
 UNF RD ISZ
 0 BBL

\ DETERMINES IF ENTRE DISPLY OR ONLY PART MUST BE BLANKED
LBL TESTSOL  \ 0B6
 $20 RC FIM
 RC SRC
 RDM
 TS1 ZERO JCN
 0 LDM
 WRM
 00 RC FIM
 0 LDM
 RB XCH
 $0F LDM
 DORAM JMS
 0 LDM
 WR0
 WR1
 WR2
 0 BBL
LBL TS1  \ TS1  CA
 $00 RC FIM  \ ???? maybe CC but I think it is 00
 RA LD
 RD XCH
 $0F LDM
 DORAM JMS
 1 BBL   \ D1

\ BLANKS DISPLAY AND INSERTS NUMBER OF
\ OBSERVATION TO BE SAVED
LBL SEESAVE \ 0D2
 R6 XCH
 00 RC FIM
 1 LDM
 RB XCH
 $0F LDM
 DORAM JMS
 00 RC FIM
 R6 LD
 RC SRC
 WRM
 0 LDM
 WR0
 WR1
 WR2
 CHECKNOSTROBE JUN

$100 ORG
\ RETURNS TO MAIN RAM BANK AND
\ TURNS ON ERROR LIGHT
LBL BB1  \ 100
 0 LDM
 DCL
 $40 RA FIM
 RA SRC
 $0F LDM
 WRR
 CHECKNOSTROBE JUN

\ NEED TO CHECK BASE OF NUMBERS


\ FUNCTIONS PERFORMED BY KEY ROUTINES
\ DESCRIBED IN APPENDIX B.

\ FLAGS AS FOLLOWS:
\ 10 - OWN SHIP COURSE AND SPEED STORAGE FLAG
\ 11 - OBSERVATION FORMAT FLAG
\ 12 - COURSE AND SPEED FORMAT FLAG
\ 13 - DECIMAL POINT FLAG
\ 14 - CONTACT ID NUMBER SELECTION FLAG
\ 15 - RANGE SELECTION FLAG
\ 16 - TIME SELECTION FLAG
\ 17 - BEARING SELECTION FLAG
\ 18 - COURSE SELECTION FLAG
\ 19 - SPEED SELECTION FLAG
\ 1A - CONTACT ID NUMBER INPUT FLAG
\ 1B - RANGE INPUT FLAG
\ 1C - TIME INPUT FLAG
\ 1D - BEARING INPUT FLAG
\ 1E - COURSE INPUT FLAG
\ 1F - SPEED INPUT FLAG
\ 20 - SOLUTION FLAG

LBL COMPUTE  \ 109
 $10 RC FIM
 RC SRC
 RDM
 BB1 ZERO JCN
 $12 RC FIM
 RC SRC
 RDM
 BB1 ZERO INV JCN
 $14 RC FIM
 RC SRC
 RDM
 BB1 ZERO JCN
 $1A RC FIM
 RC SRC
 RDM
 BB1 ZERO JCN
 13 LDM
 RB XCH
LBL COMCHECK  \ 123
  RD INC
   RC SRC
   RDM
   BB1 ZERO INV JCN
 COMCHECK RB ISZ
 0 LDM
  R6 XCH
 $0F RC FIM
  RC SRC
  RDM
  RB XCH
 $0F LDM
  WRM
 BLOCKSETUP JMS
  RA LD
   DCL
  RC SRC
   RD0
   BB1 ZERO JCN
  RC INC
   RC SRC
   RD0
   BB1 ZERO JCN
 0 LDM
  WR0
 RC LD
  R6 XCH
  RD LD
  R7 XCH
  RA LD
  RB XCH
 0 LDM
  RA XCH
  $0E0 RC FIM   \ ???? BC?EC?E0
  BLOCKTRANS JMS
 R6 LD
  DAC
  R6 XCH
  R6 SRC
  0 LDM
  WR0
  $0F0 RC FIM
 BLOCKTRANS JMS
 $0D0 RA FIM
  $0E0 RC FIM
  STATUSIN JMS
 $0D6 RA FIM
  $0F0 RC FIM
  STATUSIN JMS
 CPACOMPUTE JUN

LBL CPARETURN  \ 166
 $0E0 RA FIM
  $0D0 RC FIM
  STATUSOUT JMS
 $0F0 RA FIM
  $0D6 RC FIM
  STATUSOUT JMS
 $010 RC FIM
  RC SRC
  15 LDM
  WRM
 RD INC
  ZERORAM JMS
 RC INC
  RC SRC
  15 LDM
  WRM
 0 LDM
  R2 XCH
 $0E0 R4 FIM
  $00 R6 FIM
  TRANSLOOP JMS
 0 LDM
 WR0
  WR3
  2 LDM
  WR1
  WR2
 $00 RE FIM
 CHECKNOSTROBE JUN

LBL NUMBR \ 190
 R7 LD
  BB1 ZERO JCN
 R7 INC
 $13 RA FIM
  RA SRC
  RDM
  NORMAL ZERO JCN
 R9 LD
  DAC
  R9 XCH
 R8 SRC
  RD LD
  WRM
  CHECKNOSTROBE JUN

LBL NORMAL \ 1A2
  R5 LD
  R4 XCH
  R9 LD
  R3 XCH
LBL SHUFFLE  \ 1A6
  R2 SRC
  RDM
  RD XCH
  WRM
  R3 INC
 SHUFFLE R4 ISZ
 R6 LD
  NOSET ZERO JCN
 R6 INC
  R6 LD
  NOSET ZERO INV JCN
 10 LDM
  RB XCH
  $14 RC FIM
LBL SEARCHHISTORY \ 1B8
  RC SRC
  RDM
  SETHISTORY ZERO INV JCN
 RD INC
  SEARCHHISTORY RB ISZ
LBL SETHISTORY  \ 1BF
  CLC
  6 LDM
  RD ADD
  RD XCH
 RC SRC
  $0F LDM
  WRM
LBL NOSET  \ 1C6
 CHECKNOSTROBE JUN

LBL DECIMALN  \ 1C8
 R6 LD
  BB1 ZERO INV JCN
 $13 RC FIM
  RC SRC
  RDM
  BB1 ZERO INV JCN
 $16 RC FIM
  RC SRC
  RDM
  DCM1 ZERO JCN
 RE SRC
  2 LDM  \ LEFT DECIMAL
\  1 LDM  \ RIGHT DECIMAL
  WR2
  DCMJOIN JUN

LBL DCM1  \ 1DC  ??
  RD INC
  RC SRC
  RDM
  DCM2 ZERO JCN
 RE SRC
  2 LDM  \ LEFT DECIMAL
\  1 LDM  \ RIGHT DECIMAL
  WR1
  DCMJOIN JUN

LBL DCM2  \ 1E6
  RD INC
  RC SRC
  RDM
  DCM3 ZERO JCN
 RE SRC
  2 LDM  \ LEFT DECIMAL
\  1 LDM  \ RIGHT DECIMAL
  WR1
  DCMJOIN JUN

LBL DCM3  \ 1F0
 RD INC
 RC SRC
 RDM
 BB1 ZERO JCN
 RE SRC
 8 LDM  \ LEFT DECIMAL
\  4 LDM  \ RIGHT DECIMAL

 WR0
LBL DCMJOIN  \ 1F8
 $13 RC FIM
 RC SRC
 15 LDM
 WRM
 R7 XCH
 CHECKNOSTROBE JUN

$200 ORG
LBL BB2  \ 200
 0 LDM
  DCL
 $40 RA FIM
  RA SRC
  15 LDM
  WRR
 CHECKNOSTROBE JUN

LBL OWNSHIP  \ 209
 $10 RC FIM
  RC SRC
  RDM
  NEEDBOTH ZERO JCN
 $1E RC FIM
  RC SRC
  RDM
  R4 XCH
  R4 LD
 BOTHBLANK ZERO JCN
  $06 RA FIM
  $D6 RC FIM
  12 LDM
  RF XCH
 TRANSPART JMS
LBL BOTHBLANK  \ 21F
  $1F RC FIM
  RC SRC
  R4 LD
  CLC
  ADM
 BB2 ZERO JCN
 RDM
  R4 XCH
 1 LDM
  DCL
  $0C RC FIM  \ LOOKS LIKE A 0C
  0 LDM
LBL VITIATE1  \ 22E
   RC SRC
   WR0
   VITIATE1 RC ISZ
  2 LDM
   DCL
   0 LDM
LBL VITIATE2  \ 235
   RC SRC
  WR0
  RC INC
  VITIATE2 RD ISZ
 0 LDM
  DCL
 R4 LD
  JOINOS ZERO JCN
 $00 RA FIM
  $D0 RC FIM
  13 LDM
  RF XCH
 TRANSPART JMS
 JOINOS JUN

LBL NEEDBOTH  \ 249
  $1E RC FIM
  RC SRC
  RDM
  BB2 ZERO JCN
 RD INC  \ ??
 RC SRC
  RDM
  BB2 ZERO JCN
 $00 R4 FIM
  $D0 R6 FIM
  TRANSLOOP JMS
LBL JOINOS  \ 25A
  $10 RC FIM
  RC SRC
  $0F LDM
  WRM
 RD INC
  ZERORAM JMS
 $D0 RC FIM
  UNF JMS
  $00 R6 FIM
 $00 RC FIM
  0 LDM
  RB XCH
  $0F LDM
  DORAM JMS
 0 LDM
  WR0
  WR1
 CHECKNOSTROBE JUN

LBL COURSE  \ 274
 $11 RC FIM
  RC SRC
  RDM
  BB2 ZERO INV JCN
 R6 LD
  COURSEOK ZERO JCN
 $18 RC FIM
  RC SRC
  RDM
  BB2 ZERO JCN
LBL COURSEOK  \ 283
  UNSET7 JMS
 $12 RC FIM
  RC SRC
  $0F LDM
  WRM
 $18 RC FIM
  RC SRC
  WRM
 $1E RC FIM
  RC SRC
  0 LDM
  WRM
 $6C RA FIM  \ 60???
  TESTSOL JMS
 0 LDM
  WR1
  $FD R6 FIM
  $0D R4 FIM
 $07 R8 FIM
  CHECKNOSTROBE JUN

LBL FIRST  \ 2A1
 $20 RC FIM
  RC SRC
  RDM
  SETCHECK1 ZERO JCN
 1 LDM
  SEESAVE JUN

LBL SETCHECK1  \ 2AA
  SAME12 JMS
 BLOCKSETUP JMS
LBL SAMEFS  \
 0 LDM
  RB XCH
 $00 R6 FIM
  BLOCKTRANS JMS
 UNF JMS
  15 LDM
  WR0
 0 LDM
  DCL
 $11 RC FIM
  ZERORAM JMS
 $00 RC FIM
  0 LDM
  RB XCH
  $0F LDM
  DORAM JMS
 0 LDM
  WR1
  WR2
 $00 R6 FIM
  CHECKNOSTROBE JUN

LBL SECOND  \ 2CC
 $20 RC FIM
  RC SRC
  RDM
  SETCHECK2 ZERO JCN
 2 LDM
  SEESAVE JUN

LBL SETCHECK2  \ 2D5
  SAME12 JMS
 BLOCKSETUP JMS
 RA LD
  DCL
 RC SRC
  RD0
  BB2 ZERO JCN
 RC INC
 SAMEFS JUN

LBL SAME12  \ 2E2
 12 LDM
  RB XCH
  $1A RC FIM
LBL ALLIN  \ 2E6
  RC SRC
  RDM
  BB2 ZERO JCN
 RD INC
  ALLIN RB ISZ
 0 LDM
  R6 XCH
  $0F RC FIM
  RC SRC
  RDM
 RB XCH
  0 BBL

$300 ORG
LBL BB3  \ 300
 $40 RA FIM
  RA SRC
  15 LDM
  WRR
 CHECKNOSTROBE JUN

LBL TARGETNUMBER  \ 307
 $12 RC FIM
  RC SRC
  RDM
  BB3 ZERO INV JCN
 R6 LD
  NOK ZERO JCN
 $14 RC FIM
  RC SRC
  RDM
  BB3 ZERO JCN
LBL NOK  \ 316
  UNSET7 JMS
 $11 RC FIM
  RC SRC
  $0F LDM
  WRM
 $14 RC FIM
  RC SRC
  WRM
 $1A RC FIM
  RC SRC
  0 LDM
  WRM
 $0FF RA FIM
  TESTSOL JMS
 $0FF R6 FIM
  $0F R4 FIM
 $0F R8 FIM
 CHECKNOSTROBE JUN

LBL RANGE  \ 332
 $12 RC FIM
  RC SRC
  RDM
  BB3 ZERO INV JCN
 R6 LD
  RANGEOK ZERO JCN
 $15 RC FIM
  RC SRC
  RDM
  BB3 ZERO JCN
LBL RANGEOK  \ 341
 UNSET7 JMS
  $11 RC FIM
  RC SRC
  $0F LDM
  WRM
 $15 RC FIM
  RC SRC
  WRM
 $1B RC FIM
  RC SRC
  0 LDM
  WRM
 $0A RA FIM
  TESTSOL JMS
 $FA R6 FIM
  $0A R4 FIM
 $00 R8 FIM
  CHECKNOSTROBE JUN

LBL BEARING  \ 35D
 $12 RC FIM
  RC SRC
  RDM
  BB3 ZERO INV JCN
 R6 LD
  BEARINGOK ZERO JCN
 $17 RC FIM
  RC SRC
  RDM
  BB3 ZERO JCN
LBL BEARINGOK  \ 36C
 UNSET7 JMS
 $11 RC FIM
  RC SRC
  $0F LDM
  WRM
 $17 RC FIM
  RC SRC
  WRM
 $1D RC FIM
  RC SRC
  0 LDM
  WRM
 $6C RA FIM
  TESTSOL JMS
 0 LDM
  WR1
 $FD R6 FIM
  $0D R4 FIM
 $07 R8 FIM
  CHECKNOSTROBE JUN

LBL TIME  \ 38A
 $12 RC FIM
  RC SRC
  RDM
  BB3 ZERO INV JCN
 R6 LD
  TIMEOKOK ZERO JCN
 $16 RC FIM
  RC SRC
  RDM
  BB3 ZERO JCN
LBL TIMEOKOK  \ 399
  UNSET7 JMS
 $11 RC FIM
  RC SRC
  $0F LDM
  WRM
 $16 RC FIM
  RC SRC
  WRM
 $1C RC FIM
  RC SRC
  0 LDM
  WRM
 $AB RA FIM
  TESTSOL JMS
 0 LDM
  WR2
  $FC R6 FIM \ F0 FC ???  3AE FAILS f0
  $0C R4 FIM
 $0B R8 FIM
  CHECKNOSTROBE JUN

LBL SPEED  \ 3B7
 $11 RC FIM
  RC SRC
  RDM
  BB3 ZERO INV JCN
 R6 LD
  SPEEDOK ZERO JCN
 $19 RC FIM
  RC SRC
  RDM
  BB3 ZERO JCN
LBL SPEEDOK  \ 3C6
  UNSET7 JMS
 $12 RC FIM
  RC SRC
  $0F LDM
  WRM
 $19 RC FIM
  RC SRC
  WRM
 $1F RC FIM
  RC SRC
  0 LDM
  WRM
 $0D RA FIM
  TESTSOL JMS
 0 LDM
  WR0
  $FE R6 FIM
  $0E R4 FIM
 $01 R8 FIM
  CHECKNOSTROBE JUN

\ ZEROS FLAGS 13 THRU 19
LBL UNSET7  \ 3E4
 $13 RC FIM
  9 LDM
  RB XCH
  0 LDM
 DORAM JMS
  0 BBL

$400 ORG
LBL BB4  \ 400
 $40 RA FIM
  RA SRC
  15 LDM
  WRR
 CHECKNOSTROBE JUN

LBL SAVED  \ 407
 $20 RC FIM
  RC SRC
  RDM
  BB4 ZERO JCN
 R6 LD
  BB4 ZERO JCN
 DAC
  R6 XCH
 $0F RC FIM
  RC SRC
  RDM
  RB XCH
 BLOCKSETUP JMS
 RA LD
  DCL
 R6 LD
  SAVEIT ZERO INV JCN
 RC SRC
  $0F LDM
  WR0
 SAVEND JUN

LBL SAVEIT  \ 423
  RC LD
  R4 XCH
  RC LD
  DAC
  R6 XCH
 0 LDM
  RD XCH
  0 LDM
  R7 XCH
  TRANSLOOP JMS
 0 LDM
  R6 XCH
LBL SAVEND  \ 430
  $0F LDM
  WR0
 0 LDM
  DCL
  $00 RC FIM
  RC SRC
  $0F LDM
  WRM
 CHECKNOSTROBE JUN

LBL CPA  \ 43B
  $20 RC FIM
   RC SRC
   RDM
   BB4 ZERO JCN
  $E0 R4 FIM
   $00 R6 FIM
   TRANSLOOP JMS
  0 LDM
   WR0
   2 LDM
   WR1
   WR2
  CHECKNOSTROBE JUN

LBL TARGETSHIP  \ 44E
  $20 RC FIM
   RC SRC
   RDM
   BB4 ZERO JCN
  $F0 R4 FIM
   $00 R6 FIM
   TRANSLOOP JMS
  8 LDM
   WR0
   2 LDM
   WR1
   0 LDM
   WR2
  CHECKNOSTROBE JUN

\ TRANSFERS COURSE AND SPEED DATA TO
\ RAM REGISTER E ANF F STATUS CHARACTERS
LBL STATUSIN  \ 462
  RA SRC
   RDM
   RC SRC
   WR0
   RB INC
  RA SRC
   RDM
   RC SRC
   WR1
   RB INC
  RA SRC
   RDM
   RC SRC
   WR2
   RB INC
  RA SRC
   RDM
   RC SRC
   WR3
   0 BBL

\ TRANSFERS COURSE AND SPEED DATA OUT OF
\ STATUS CHARACTERS INTO WORKING REGISTERS
LBL STATUSOUT  \ 476
  RA SRC
   RD0
   RC SRC
   WRM
   RD INC
  RA SRC
   RD1
   RC SRC
   WRM
   RD INC
  RA SRC
   RD2
   RC SRC
   WRM
   RD INC
  RA SRC
   RD3
   RC SRC
   WRM
   0 BBL

\ LOOPS APPROX. 5 MILLISECS
LBL WAIT5  \ 48A
  0 LDM
   RA XCH
   0 LDM
   RB XCH
LBL WAIT5LOOP  \ 48E
   WAIT5LOOP RB ISZ
   WAIT5LOOP RA ISZ
  0 BBL

R0 VALUE P1
R2 VALUE T1
R1 VALUE D0
R3 VALUE D1
R4 VALUE D2
RB VALUE D3
R8 VALUE BCD1
RA VALUE CNT1
RC VALUE L1
RD VALUE L2
RE VALUE RAM1R
RF VALUE RAM2R

\ THE DISPAY CONSISTS OF 16 LED'S AND A 16-BIT SHIFT
\ REGISTER. A ROM PORT IS USED TO SEND THE BCD
\ INFORMATION TO THE 7447 DECODERS FOR ALL 16 LED'S
\ AT THE SAME TIME. tHE SHIFT REGISTER IS USED TO
\ ENABLE ONLY ONE OF THESE LED'S AT A PARTICULAR
\ TIME. ROM PORT 0 IS USED FOR THE DISPLAY CHARACTER.
\ ROM PORT 1 IS USED FOR CONTROL.: THE HIGH ORDER BIT
\ IS USED FOR THE DECIMAL POINT (1 MEANS OFF), THE
\ NEXT BIT IS USED TO CLOCK THE SHIFT REGISTER
\ ( A CHANGE FROM 1 TO 0 CAUSES THE REGISTER TO SHIFT),
\ AND THE LOW ORDER BIT IS THE SHIFT REGISTER DATA
\ BIT. A 0 IN THE SHIFT REGISTER ENABLES AN LED,
\ A 1 DISABLES. THE ROUTINE IS WRITTEN SUCH THAT
\ A SINGLE 0 IS SGIFTING ACROSS THE REGISTER,
\ ENABLING EACH LED IN TURN ;

LBL DISPLAY  \ 493
\ INITIALIZE
\  00 RAM1R FIM  \ MISSING CODE? DIDN'T DO DP CORECTLY
  0 LDM
   BCD1 XCH \ BCD PORT
  1 LDM
   CNT1 XCH \ CONTROL PORT
  0 LDM
   P1 XCH
   $CC L1 FIM \ CC NOT 00!! 4 X 4 FOR THE LOOPS
\ LOOP COUNTERS
  RAM1R SRC
   RD0
   D0 XCH
  RD1
   D1 XCH
   RD2
   D2 XCH
   RD3
   D3 XCH
\ CLOCK SHIFT REGISTER
LBL CLOK  \ 4A4
   CLB
   4 LDM
   P1 ADD
   CNT1 SRC
   WRR
\ CLOCK NOW HIGH
\ BLANK DISPLAY DURING SHIFT
  15 LDM
   BCD1 SRC
   WRR
\ HANDLE DECIMAL POINT
  P1 LD
   RAL
   STC
   RAR
   P1 XCH
  D0 LD
   RAL
   D0 XCH
   DCLCK CARRY INV JCN
  P1 LD
   RAL
   CLC
   RAR
   P1 XCH
\ DROP CLOCK
LBL DCLCK  \ 4BB
  CNT1 SRC
   P1 LD
   WRR
\ SEND RAM DIGIT
  RAM1R SRC
   RDM
   BCD1 SRC
   WRR
   RAM2R INC
  P1 LD
   RAR
   STC
   RAL
   P1 XCH
\ WAIT A WHILE
   0 LDM
   T1 XCH
LBL WAITMS  \ 4CA
   WAITMS T1 ISZ
\ LOOP BACK TO DISPLAY REMAINING DIGITS
 CLOK L1 ISZ
   D1 LD
   D0 XCH
  D2 LD
   D1 XCH
   D3 LD
   D2 XCH
  12 LDM
   L1 XCH
   CLOK L2 ISZ
  CNT1 SRC
   13 LDM
   WRR
   9 LDM
   WRR
  0 BBL

LBL CLEARKEY  \ 4DE
  $00 RC FIM
   0 LDM
   RB XCH
   $0F LDM
   DORAM JMS
  0 LDM
   WR0
   WR1
   WR2
  $11 RC FIM
   ZERORAM JMS
  $00 R6 FIM
  CHECKNOSTROBE JUN
\ END CONTROL PROGRAM

$500 ORG
\ MANEUVERING BOARD ALGORITHM

\ INPUT TIMES RANGES BEARINGS. CONVERT TO
\ RECTANGLAR COORDS
LBL CPACOMPUTE  \ 500
  $0F6 RA FIM   \ F0 HAS 1ST
   $00 RC FIM
   LOADBRG JMS
   \ 506
  CORDIC JMS
  $0F0 RA FIM
   $30 RC FIM
   LOADRNG JMS
  $30 R2 FIM  \ RANGE 1ST
   $10 R4 FIM \ COS
   $80 R6 FIM  \ RESULT X 1ST
   MLRT JMS
  $30 R2 FIM  \ RANGE 1ST
   $20 R4 FIM \ SIN
   $90 R6 FIM  \ RESULT Y 1ST
   MLRT JMS
  $E6 RA FIM  \ E0 HAS 2ND
   RA SRC
   0 LDM
   WR3         \ GUESS IT IS A FLAG TO SHOW CALCUATED
   $00 RC FIM
  LOADBRG JMS
   \ 527
  CORDIC JMS
   $E0 RA FIM
   $30 RC FIM
   LOADRNG JMS
  $30 R2 FIM
   $10 R4 FIM
   $60 R6 FIM \ RESULT X 2ND
   MLRT JMS
  $30 R2 FIM
   $20 R4 FIM
   $70 R6 FIM \ RESULT Y 2ND
   MLRT JMS
  $60 R4 FIM
   $10 R6 FIM \ RESULT X 2ND
   TRANSLOOP JMS
  $70 R4 FIM
   $20 R6 FIM \ RESULT Y 2ND
   TRANSLOOP JMS

\ COMPUTE X,Y COORDINATES OF RELATIVE
\ MOTION LINE
   \ 54B
  $10 R0 FIM    \ 2ND X
   $80 R2 FIM  \ 1ST X
   SBRT JMS  \ DX
  $20 R0 FIM
   $90 R2 FIM
   SBRT JMS  \ DY
\ 557
\ IF Y COORD > X COORD ROTATE POSITS +90
\ TO AVOID POSSIBLE INFINITE SLOPE OF
\ RELATIVE MOTION LINES
  $20 R4 FIM
   $A0 R6 FIM  \ DY
   TRANSLOOP JMS
   \ 55D
   RD0
   RAR
   POSY CARRY INV JCN
   \ 561
  $A0 R0 FIM
   CPLRT JMS
LBL POSY  \ 565
  $10 R4 FIM
   $B0 R6 FIM  \ DX
   TRANSLOOP JMS
   \ 56B
  RD0
   RAR
   POSX CARRY INV JCN  \ ??
  \ 56F
  $B0 R0 FIM
   CPLRT JMS
LBL POSX  \ 573
   $A0 R0 FIM  \ DY
   $B0 R2 FIM \ DX
   SBRT JMS
  \ 579
  RD0
   RAR
   NOROTATE CARRY JCN  \ ??
  REVOLVE JMS

\ COMPUTE SLOPE OF RELATIVE MOTION LINE
LBL NOROTATE  \ 57F
  $20 R2 FIM
   $10 R6 FIM
   $70 R8 FIM
  $A0 R4 FIM
   DVRT JMS
   \ 589
\ COMPUTE DRM AND SRM
  CORDICAT JMS  \ 00 ANGLE
   \ 58B
   $EA RA FIM
   $30 RC FIM
   LOADTIMELO JMS
  $FA RA FIM
   $40 RC FIM
   LOADTIMELO JMS
  $50 R4 FIM
   HRSPERMIN R0 FIM
   FERT JMS
  $30 R2 FIM
   $50 R4 FIM
   $A0 R6 FIM
   MLRT JMS
  $40 R2 FIM
   $50 R4 FIM
   $B0 R6 FIM
   MLRT JMS
  $ED RA FIM
   $A0 RC FIM
   LOADTIMEHI JMS
  $FD RA FIM
   $B0 RC FIM
   LOADTIMEHI JMS
  \ 5B9
  $A0 R0 FIM   \ 2ND TIME IN HOURS
   $B0 R2 FIM  \ 1ST TIME
   SBRT JMS  \ A0 DT
  \ 5C3
  RD0
   RAR
   TIMECK CARRY INV JCN   \ ???
  $C0 R4 FIM
   DAY R0 FIM
   FERT JMS
  $A0 R0 FIM
   $C0 R2 FIM  \ C0 00 ?? 5CB
   ADRT JMS
\ COMPUTE CPA POINT IN RECTANGULAR
\ COORDINATES
LBL TIMECK  \ 5CF
  $20 R2 FIM  \ DX>Y
   $A0 R6 FIM  \ DT
   $C0 R8 FIM  \ RATE
  $D0 R4 FIM  \
  DVRT JMS
  \ 5D9
  $70 R4 FIM  \ X/Y
   $50 R6 FIM
   TRANSLOOP JMS
  $70 R2 FIM  \ X/Y
   $50 R4 FIM  \ X/Y
   $D0 R6 FIM
   MLRT JMS  \ D0 IS SLOPE^2
   \ 5E7
  $80 R2 FIM  \ 1ST X
   $D0 R4 FIM \ SLOPE^2
   $50 R6 FIM
   MLRT JMS  \ SLOPE^2 * 1ST X
  \ 5EF
  9 LDM
   R5 XCH
   R4 SRC
   1 LDM
   WRM  \ WAS LIKE ADD 1 TO SLOPE^2 ??

  $90 R2 FIM \ DY
   $70 R4 FIM  \ X/Y
   $30 R6 FIM
   MLRT JMS   \ DY * X/Y
   \ 5FC
  $50 R0 FIM
   $30 R2 FIM
   SBRT JMS
   \ 602
  $80 R2 FIM
   $70 R4 FIM
   $40 R6 FIM
   MLRT JMS
   \ 60A
  $90 R4 FIM   \ DY?
   $30 R6 FIM
   TRANSLOOP JMS
    \ 610
  $30 R0 FIM
   $40 R2 FIM
   SBRT JMS
    \ 616
  $50 R2 FIM
   $D0 R6 FIM
   $10 R8 FIM
  $40 R4 FIM
   DVRT JMS
    \ 620
  $30 R2 FIM
   $D0 R6 FIM
   $20 R8 FIM
  $40 R4 FIM
   DVRT JMS
    \ 62A
  $60 R4 FIM
   $A0 R6 FIM
   TRANSLOOP JMS
  $A0 R0 FIM
   $80 R2 FIM
   SBRT JMS
    \ 636
  RD0
   RE XCH
\ TEST FOR FAST-CPA
  $10 R4 FIM
   $A0 R6 FIM
   TRANSLOOP JMS
   \ 63E
  $60 R2 FIM
   SBRT JMS
   \ 642
  NOP
   \ 643
  RD0
   CLC
   RE ADD
   RAR
    \ 647
   FINDCPA CARRY INV JCN  \ ??

\ PAST-CPA INDICATED BY ALL F'S OUTPUT
  $0F LDM
  $E0 R0 FIM
LBL FLOOP  \
   R0 SRC
   WRM
  FLOOP R1 ISZ
  $00 R4 FIM
   $A0 R6 FIM
   TRANSLOOP JMS
\ IF PAST-CPA COMPUTE TARGET
\ COURSE AND SPEED
  FINDCANDS JUN

\ ELSE COMPUTE CPA BEARING, RANGE AND TIME
LBL FINDCPA  \ 658
   $10 R4 FIM
   $60 R6 FIM
   TRANSLOOP JMS
  $20 R4 FIM
   $70 R6 FIM
   TRANSLOOP JMS
  $00 R4 FIM
   $A0 R6 FIM
   TRANSLOOP JMS
  CORDICAT JMS
\ IF POSITIONS ROTATED, ROTATE CPA BEARING
\  MINUS 90 DEGREES
  $E0 RA FIM
   RA SRC
   RD3
   NOBACKROTATE1 ZERO JCN
  $30 R4 FIM
   MINPI2 R0 FIM
   FERT JMS
  $00 R0 FIM
   $30 R2 FIM
   ADRT JMS
  R0 SRC
   RD0
   RAR
   NOBACKROTATE1 CARRY INV JCN
  $30 R4 FIM
   TWOPI R0 FIM
   FERT JMS
  $00 R0 FIM
   $30 R2 FIM  \ 0 ???????
   ADRT JMS
\ PUT VALUES INTO OUTPUT FOR CPA BEARING
\  AND RANGE
LBL NOBACKROTATE1  \ 68F
  $08 RA FIM
   $E6 RC FIM
  12 LDM
   RF XCH
   TRANSPART JMS
  $29 RA FIM
   $E0 RC FIM
   10 LDM
   RF XCH
  TRANSPART JMS
  $E5 RC FIM
   11 LDM
   RB XCH
   FBACK JMS
  $60 R4 FIM
   $10 R6 FIM
   TRANSLOOP JMS
  $70 R4 FIM
   $20 R6 FIM
   TRANSLOOP JMS
  $10 R0 FIM
   $80 R2 FIM
   SBRT JMS
  $20 R0 FIM
   $90 R2 FIM
   SBRT JMS
  CORDICAT JMS
  $20 R2 FIM
   $C0 R6 FIM  \ C0 00 ?? 6C1 0 MESSES THE TIME
   $00 R8 FIM
  $10 R4 FIM
   DVRT JMS
  $B0 R0 FIM
   $00 R2 FIM \ TRY C0 REALLY MESSES THE TIME
   ADRT JMS
\ CONVERT CPA TIME TO PRCPER HRS AND MINS AND STORE
  $B0 R4 FIM
   $00 R6 FIM
   TRANSLOOP JMS
  $10 R4 FIM
   DAY R0 FIM
   FERT JMS
  $00 R0 FIM
   $10 R2 FIM
   SBRT JMS
  RD0
   RAR
   GOCDTIME CARRY JCN  \ ???
  $00 R4 FIM
   $B0 R6 FIM
   TRANSLOOP JMS
LBL GOCDTIME  \ 6EB
   $B9 RA FIM
   $ED RC FIM
  14 LDM
   RF XCH
LBL HROUT  \ 6F1
   RA SRC
   RDM
   RE XCH
   0 LDM
   WRM   \
  RE LD
   RC SRC
   WRM
   RB INC
   RD INC
   HROUT RF ISZ
  $00 RC FIM
   ZERORAM JMS
  6 LDM
   $0A RC FIM
   RC SRC
   WRM
  $00 R2 FIM
   $B0 R4 FIM
   $10 R6 FIM
   MLRT JMS
  $18 RA FIM
   $EA RC FIM
   13 LDM
   RF XCH
  TRANSPART JMS
\ COMPUTE TARGET COURSE AND SPEED

LBL FINDCANDS  \ 716
  $E0 RA FIM
   RA SRC
   RD3
  NOBACKROTATE2 ZERO JCN
  $00 R4 FIM
   MINPI2 R0 FIM
   FERT JMS
  $A0 R0 FIM
   $00 R2 FIM
   ADRT JMS
  R0 SRC
   RD0
   NOBACKROTATE2 CARRY INV JCN  \ ???
  $00 R4 FIM
   TWOPI R0 FIM
   FERT JMS
  $A0 R0 FIM
   $00 R2 FIM
   ADRT JMS
LBL NOBACKROTATE2  \ 738
   RA SRC
   0 LDM
   WR3
  $00 RC FIM
   $F6 RA FIM
  RA SRC
   RD0
   WRM
   RB INC
  RA SRC
   RD1
   WRM
   RB INC
  RA SRC
   RD2
   WRM
   RB INC
  RA SRC
   RD3
   WRM
   $F6 RA FIM
  LOADBRG JMS
  CORDIC JMS
  $E0 RA FIM
   $00 RC FIM
   ZERORAM JMS
  $0C RC FIM   \ ???? 75A
   RC SRC
   2 LDM
   WRM
  $40 RC FIM
   ZERORAM JMS
  8 LDM
   RD XCH
  RA SRC
   RD0
   RC SRC
   WRM
   RD INC
  RA SRC
   RD1
   RC SRC
   WRM
   RD INC
  RA SRC
   RD2
   RC SRC
   WRM
  $40 R2 FIM
   $00 R4 FIM
   $30 R6 FIM
   MLRT JMS
  $30 R2 FIM
   $10 R4 FIM
   $60 R6 FIM
   MLRT JMS
  $30 R2 FIM
   $20 R4 FIM
   $70 R6 FIM
   MLRT JMS
  $A0 R4 FIM
   $00 R6 FIM
   TRANSLOOP JMS
  CORDIC JMS
  $C0 R2 FIM  \ ??? 793
   $10 R4 FIM
   $80 R6 FIM  \ 7BD
   MLRT JMS
  $C0 R2 FIM   \ ???
   $20 R4 FIM
   $90 R6 FIM
   MLRT JMS
  $80 R4 FIM
   $10 R6 FIM
   TRANSLOOP JMS
  $90 R4 FIM
   $20 R6 FIM
   TRANSLOOP  JMS
  $10 R0 FIM
   $60 R2 FIM
   ADRT JMS
  $20 R0 FIM
   $70 R2 FIM
   ADRT JMS
  CORDICAT JMS

\ OUTPUT TARGET COURSE AND SPEED
  $F0 RC FIM
   1 LDM
   RB XCH
   15 LDM
   DORAM JMS
  $08 RA FIM
   $F6 RC FIM
   12 LDM
   RF XCH
  TRANSPART JMS
  $10 RC FIM
   ZERORAM JMS
  5 LDM
   $15 RC FIM
   RC SRC
   WRM
  $20 R2 FIM
   $10 R4 FIM \ c 0 ?
   $30 R6 FIM
   MLRT JMS
  $38 RA FIM
   $F0 RC FIM
   13 LDM
   RF XCH
  TRANSPART JMS
   $F2 RC FIM
   14 LDM
   RB XCH
   FBACK JMS
LBL ATLASTOHATLAST  \ 7EB
   CPARETURN JUN

\ END MANEUVERING BCARD ALGORITHM

\ ROTATES POSITIONS PLUS 90 DEGREES
LBL REVOLVE  \ 7ED
  $10 R4 FIM
   $30 R6 FIM
   TRANSLOOP JMS
  $20 R4 FIM
   $10 R6 FIM
   TRANSLOOP JMS
  $10 R0 FIM
   CPLRT JMS
  $30 R4 FIM
   $20 R6 FIM
   TRANSLOOP JMS
  $70 R0 FIM
   CPLRT JMS
  $70 R4 FIM
   $60 R6 FIM
   TRANSLOOP JMS
  $80 R4 FIM
   $30 R6 FIM
   TRANSLOOP JMS
  $90 R4 FIM
   $80 R6 FIM
   TRANSLOOP JMS
  $80 R0 FIM
   CPLRT JMS
  $30 R4 FIM
   $90 R6 FIM
   TRANSLOOP JMS
  $0F LDM
   $E0 R0 FIM
   R0 SRC
   WR3
  0 BBL

\ ZEROES A RAM REGISTER AND ITS SIGN
LBL ZERORAM  \ 829
   CLB
LBL ZRAM  \ 82A
   RC SRC
   WRM
   ZRAM RD ISZ
   WR0
   0 BBL

\ TRANSFERS BEARING FROM STORAGE TO
\  WORKING REGISTER
LBL LOADBRG  \ 830
  ZERORAM JMS
   8 LDM
   RD XCH
  12 LDM
   RF XCH
   TRANSPART JMS
   00 BBL

\ TRANSFERS RANGE FROM STORAGE TO
\  WORKING REGISTER
LBL LOADRNG  \ 839
  ZERORAM JMS
   9 LDM
   RD XCH
  10 LDM
   RF XCH
   TRANSPART JMS
   0 BBL

\ TRANSFERS PART OF REGISTER TO ANOTHER
LBL TRANSPART  \ 842
   RA SRC
   RDM
   RC SRC
   WRM
  RB INC
   RD INC
   TRANSPART RF ISZ
   0 BBL

\ TRANSFERS MINUTES FROM STORAGE TO
\ WORKING REGISTER
LBL LOADTIMELO  \ 84B
  ZERORAM JMS
   8 LDM
   RD XCH
   13 LDM
   RF XCH
  TRANSPART JMS
   0 BBL

\ TRANSFER HOURS FROM STORAGE TO
\ WORKING REGISTER
LBL LOADTIMEHI  \ 854
  9 LDM
   RD XCH
   14 LDM
   RF XCH
  TRANSPART JMS
   0 BBL

\ LOADS PART OF REGISTER WITH CHARACTER
\ IN ACCUMULATOR
LBL DORAM  \ 85B
  RC SRC
   WRM
   RD INC
   DORAM RB ISZ
   0 BBL
\ CHANGES LEADING ZEROES TO BLANKS ON DISPLAY
LBL FBACK  \ 861
  RC SRC
   RDM
   NONZERO ZERO INV JCN
  $0F LDM
   WRM
   RD LD
   DAC
   RD XCH
   FBACK RB ISZ
LBL NONZERO  \ 86C
   0 BBL

\ SETS UP SUBLOOP COUNT 7,9,9,10 FOR
\  CORDIC ROUTINES AND FETCHES ARCTANGENT
\  CONSTANTS FROM ROM
LBL SETUP  \ 86D
  RC LD
   RAR
   SETUP1 CARRY JCN  \ ????
  RAR
   SETUP2 CARRY JCN
  RAR
   SETUP3 CARRY JCN
  RAR
   SETUP4 CARRY JCN
LBL FALLTHRU5  \ 87A
   $50 R4 FIM
   A5 R0 FIM
   FERT JMS
  6 LDM
   RE XCH
   12 BBL

LBL SETUP1  \ 883
   2 LDM
   RC XCH
  $50 R4 FIM
   A1 R0 FIM
   FERT JMS
  15 LDM
   RE XCH
   0 BBL

LBL SETUP2  \ 88E
   4 LDM
   RC XCH
  $50 R4 FIM
   A2 R0 FIM
   FERT JMS
  9 LDM
   RE XCH
   15 BBL

LBL SETUP3  \ 899
   8 LDM
   RC XCH
  $50 R4 FIM
   A3 R0 FIM
   FERT JMS
  7 LDM
   RE XCH
   14 BBL

LBL SETUP4  \ 8A4
   0 LDM
   RC XCH
  $50 R4 FIM
   A4 R0 FIM
   FERT JMS
  7 LDM
   RE XCH
   13 BBL

  R2 VALUE A
  R3 VALUE AP
  R3 VALUE CNT
  R4 VALUE R
  R5 VALUE RP
  R6 VALUE C
  R7 VALUE CP
  R8 VALUE Q
  R9 VALUE QP
\ 8AF-8B0
  RA VALUE NN  \
  RB VALUE NP
  RC VALUE KK   \
  RD VALUE KP
  RE VALUE SHIFTA
  RF VALUE SHIFTC

\ DIVICE ROUTINE, SETS UP TO USE DECDIV
LBL DVRT  \ 8AF
  A SRC
   RD0
   RAR
   DV4 CARRY INV JCN
  A LD
   R0 XCH
   0 LDM
   R1 XCH
   CPLRT JMS
   STC
  1 LDM
   WR1
LBL DV4 \ 8BD
   RAL
   RF XCH
   C SRC  \ c 0R 0
   RD0
   RAR
   DV6 CARRY INV JCN  \ ???
  C LD
   R0 XCH
   0 LDM
   R1 XCH
   CPLRT JMS
   STC
  1 LDM
   WR1
LBL DV6  \ 8CD
   RAL
   CLC
   RF ADD
   Q SRC
   WR0
  DECDIV JMS

LBL CHKPT  \ 8D4
  A SRC
   RD1
   DV1 ZERO JCN
  A LD
   R0 XCH
   0 LDM
   WR1
   R1 XCH
   CPLRT JMS
LBL DV1  \ 8DF
   C SRC  \ ????
   RD1
   DV2 ZERO JCN
  C LD
   R0 XCH
   0 LDM
   WR1
   R1 XCH
   CPLRT JMS
LBL DV2  \ 8EA
   Q SRC
   RD0
   RAR
   ATLASTDIV CARRY INV JCN  \ ???
  CLC
   RAL
   WR0
   Q LD
   R0 XCH
   0 LDM
   R1 XCH
  CPLRT JMS
LBL ATLASTDIV  \
  0 BBL

$900 ORG
\ CORDIC ROTATIOM MODE FOR SIN
\  AND COS FUNCTIONS
LBL CORDIC \ 900
  $00 R4 FIM
   $30 R6 FIM
   TRANSLOOP JMS
  $40 R4 FIM
   MINPI R0 FIM
   FERT JMS
  $30 R0 FIM
   $40 R2 FIM
   ADRT JMS   \ CARRY >180
\ PLACE INPUT ANGLE IN FIRST OR FOURTH
\ QUADRANTS
  RD0
   RAR
   SKIP1 CARRY JCN   \ CARRY >180
  $30 R4 FIM
   MIN3PI2 R0 FIM
   FERT JMS         \
  $00 R0 FIM
   $30 R2 FIM
   ADRT JMS
  $20 R4 FIM
   MINVK R0 FIM
   FERT JMS
  JOIN1 JUN

LBL SKIP1  \ 92A
   $30 R4 FIM
   MINPI2 R0 FIM
   FERT JMS
  $00 R0 FIM
   $30 R2 FIM
   ADRT JMS
  $20 R4 FIM
   INVK R0 FIM
   FERT JMS
\ TEST INPUT ANGLE FOR DIRECTION OF ROTATION
\  AND ROTATE PLUS OR MINUS 45 DEGREES
LBL JOIN1  \ 93C
  $30 R4 FIM
   A1 R0 FIM
   FERT JMS
  $00 R0 FIM
   R0 SRC
   RD0
   RAR
   SKIP2 CARRY INV JCN  \ ???
  $00 R0 FIM
   $30 R2 FIM
   ADRT JMS
  $20 R4 FIM
   $10 R6 FIM
   TRANSLOOP JMS
  JOIN2 JUN

LBL SKIP2  \ 957
  $00 R0 FIM
   $30 R2 FIM
   SBRT JMS
  $20 R4 FIM
   $10 R6 FIM
   TRANSLOOP JMS
  $10 R0 FIM
   CPLRT JMS
\ DO REST OF ROTATES
LBL JOIN2  \ 967
   2 LDM
\   1 LDM \ WORSE !!!
   RC XCH
   12 LDM
   RA XCH
LBL MLOOP  \ 96B  ????
   SETUP JMS
   RB XCH
LBL LOOPP  \ 96E
  $00 R0 FIM
   R0 SRC
   RD0
   RAR
   SKIPX CARRY INV JCN
  $0F LDM
   RD XCH
   JOINX JUN

LBL SKIPX  \ 979
   0 LDM
   RD XCH
LBL JOINX  \ 97B
   ROTATE JMS
  LOOPP RE ISZ
  MLOOP RA ISZ
\ END CORDIC ROTATION MODE,
\  RAM 10 HAS COS, RAM 20 HAS SIN
LBL ATLAST  \ 981
   0 BBL

\ COMPLEMENTS REGISTER
LBL CPLRT  \ 982
  CLC
LBL COMPL  \ 983
   R0 SRC
   6 LDM
   ADM
   CMA
   WRM
  COMPL R1 ISZ
  STC
LBL TENS  \ 98B
   0 LDM
   R0 SRC
   ADM
   DAA
   WRM
   R1 INC
  TENS CARRY JCN
  R0 SRC
   RD0
   RAR
   CMC
   RAL
   WR0
   0 BBL

\ REM ADDS TWO REGISTERS INTO FIRST
LBL ADRT  \ 99A
  CLC
LBL ADDR  \ 99B
  R0 SRC
   RDM
   R2 SRC
   ADM
   DAA
   R0 SRC
   WRM
  R3 INC
  ADDR R1 ISZ
  RD0
   RF XCH
   R2 SRC
   RD0
   RF ADD
   R0 SRC
   WR0
   0 BBL

\ SUBTRACTS TWO REGISTERS, ANSWER IN FIRST
LBL SBRT  \ 9AD
  10 LDM
   RF XCH
   CLB
LBL SUBT  \ 9B0
   R0 SRC
   RDM
   R2 SRC
   SBM
   OOK CARRY JCN
  RF ADD
   CLC
LBL OOK  \ 9B8
   CMC
   R0 SRC
   WRM
   R3 INC
   SUBT R1 ISZ
  RD0
   RF XCH
   R2 SRC
   RD0
   RF ADD
   R0 SRC
   WR0
   0 BBL

\ TRANSFERS CONTENTS OF ONE REGISTER TO ANOTHER
LBL TRANSLOOP \ 9C6
  R4 SRC
   RDM
   R6 SRC
   WRM
   R5 INC
   TRANSLOOP R7 ISZ
  R4 SRC
   RD0
   R6 SRC
   WR0
   0 BBL

$A00 ORG

\ CORDIC VECTORING MODE FOR ARCTAN AND
\ MODULUS FUNCTION
LBL CORDICAT
\ ZERO RAM FOR Z IN $00, X IN $10, Y IN $20
\ R2 VALUE A
R4 VALUE B
R5 VALUE BPP
\ R6 VALUE C
\ R7 VALUE CP
RE VALUE CBASE
  $00 R0 FIM
   CLB
LBL ZEROLOOPAT  \ A03
   R0 SRC
   WRM
   ZEROLOOPAT R1 ISZ
   WR0
  $20 R4 FIM
   $30 R6 FIM
   TRANSLOOP JMS
  R6 SRC
   RD0
   RAR
   SWITCH1 CARRY INV JCN
  $30 R0 FIM
   CPLRT JMS
LBL SWITCH1  \ A17
   $10 R4 FIM
   $40 R6 FIM
   TRANSLOOP JMS
  R6 SRC
   RD0
   RAR
   SWITCH2 CARRY INV JCN
  $40 R0 FIM
   CPLRT JMS
\ TEST Y/X TO MAXIMIZE TRUNCATION ERROR
LBL SWITCH2  \ A26
   $30 R0 FIM
   $40 R2 FIM
   SBRT JMS
  R0 SRC
   RD0
   RAR
  SWITCH3 CARRY JCN \ nzcy
 \    A31
  00 R4 FIM
   MINPI2 R0 FIM
   FERT JMS
  $10 R4 FIM
   $30 R6 FIM
   TRANSLOOP JMS
  $20 R0 FIM
   CPLRT JMS
  $20 R4 FIM
   $10 R6 FIM
   TRANSLOOP JMS
  $30 R4 FIM
   $20 R6 FIM
   TRANSLOOP JMS
 \ ENSURE X POSITIVE
LBL SWITCH3 \ A4D
  $10 R0 FIM
   R0 SRC
   RD0
   RAR
  SWITCH4 CARRY INV JCN
  CPLRT JMS
   $20 R0 FIM   \ C
   CPLRT JMS
  $30 R4 FIM
   MINPI R0 FIM
   FERT JMS
  00 R0 FIM
   $30 R2 FIM
   SBRT JMS
\ TEST Y AND DRIVE TO C, THEN DO REST CP ROTATES
LBL SWITCH4  \ A66
  1 LDM
   RC XCH  \ THINK IS C ??//
   11 LDM
   RA XCH
LBL MLOOPAT  \ A6A
   SETUP JMS
   RB XCH  \  MAYBE RE AND NOT RB
LBL LOOPAT  \ A6D
   $20 R0 FIM
   R0 SRC
   RD0
   RAR
  SKIPXAT CARRY JCN
  $0F LDM
   RD XCH
   JOINXAT JUN
LBL SKIPXAT \ A78
   $0 LDM   \ SHOULD BE 0 ???
   RD XCH
LBL JOINXAT \ A7A
  ROTATE JMS
  LOOPAT RE ISZ
  MLOOPAT RA ISZ
\ X= X*I/K
LBL CHECK \ A80
  $30 R4 FIM
   INVK R0 FIM
   FERT JMS
  $30 B FIM  \
   $10 A FIM
   $20 C FIM  \ C
   MLRT JMS
  00 R0 FIM
   R0 SRC
   RD0
   RAR
   ATLASTAT CARRY INV JCN
  $30 R4 FIM
   TWOPI R0 FIM
   FERT JMS
  00 R0 FIM
   $30 R2 FIM
   ADRT JMS
\ AA1
  \ END CORDIC VECTORING MODE
  \ RAM 00 HAS ARCTAN RAM 10 HAS MODULUS
LBL ATLASTAT \ AA1
  0 BBL
\ ROTATE ROUTINE FOR CORDIC ALGORITHMS
LBL ROTATE  \ AA2
 00 R0 FIM
  $50 R2 FIM
 RD LD
 SZ ZERO JCN
  ADRT JMS
  JZ JUN  \  ??? NEED TO FIX
LBL SZ  \ AAD
  SBRT JMS
LBL JZ  \ AAF
  $10 R4 FIM
   $30 R6 FIM
   TRANSLOOP JMS
  $20 R4 FIM
   $40 R6 FIM
   TRANSLOOP JMS
  $40 R2 FIM
   15 LDM
   R3 XCH
   R2 SRC
   RDM     \ MSD OF 40
   R9 XCH  \ TO R9
  R3 INC
   RB LD
   NOSHIFTX ZERO JCN
   SHIFT JMS
LBL NOSHIFTX  \ AC8
   $10 R0 FIM
  RD LD
   SX ZERO JCN
   ADRT JMS
   JX JUN
LBL SX  \ AD1
    SBRT JMS
LBL JX  \ AD3
  $30 R2 FIM
   15 LDM
   R3 XCH
   R2 SRC
   RDM
   R9 XCH
  R3 INC
   RB LD
   NOSHIFTY ZERO JCN
   SHIFT JMS
LBL NOSHIFTY \ AE0
   $20 R0 FIM
  RD LD
   SY ZERO JCN
   SBRT JMS
   $0B BBL
LBL SY  \ AE8
   ADRT JMS
   $A BBL

\ SHIFT  FUNCTION FOR CORDIC ALGORITHHMS
LBL SHIFT \ AEB
  RB LD
   R9 XCH
LBL MINORLOOP \ AED
   R2 SRC
   WRM
   R3 INC
   MINORLOOP RB ISZ
  R9 LD
  RB XCH
  0 BBL
\ BEGIN 2816
\ B00
$B00 ORG
\  FETCHES CONSTANT FROM rom
\ R4p is destination
\ R0p is the sourse
\ RF & R2 ARE USED
LBL FERT  \ B00
   8 LDM
   RF XCH
LBL FETCHLOOP \ B02
   R2 FIN
   R2 XCH
   R4 SRC
   WRM
   R5 INC
  R3 XCH
   R4 SRC
   WRM
   R5 INC
   NOINC R1 ISZ
   R0 INC
LBL NOINC  \ B0E
   FETCHLOOP RF ISZ
  R2 FIN
   R2 XCH
   R4 SRC
   WR0
   $0 BBL  \ 0 ????
\ CONSTANTS CF 360, -180, -270, -90 DEGREES
LBL TWOPI   NR, 000000000063000000 \ 360  2 PI
LBL MINPI   NR, 000000000028999910  \ -180  -PI
LBL MIN3PI2 NR, 000000000037999910  \ -270  3/2 PI
LBL MINPI2  NR, 000000000019999910  \ -90   -1/2 PI

\ CONSTANTS CF 1/K, -1/K
LBL INVK    NR, 615495286000000000  \ 1/K
LBL MINVK   NR, 484504713999999910  \ -1/K
\ ARCTAN
LBL A1      NR, 000000000540000000  \ 45
LBL A2      NR, 731395017500000000
LBL A3      NR, 896839275000000000
LBL A4      NR, 067592750000000000
LBL A5      NR, 875927500000000000
\ TIME CONVERSTION CONSTANTS B78
LBL DAY     NR, 000000000420000000
LBL HRSPERMIN NR, 766666610000000000

\ MULTIPLY ROUTINE
LBL MLRT \ B8A
   CLB
   CP XCH
   0 LDM
   CBASE XCH
   0 LDM
LBL ZEROLOOPM  \ B8F
   C SRC  \ ???
   WRM
   ZEROLOOPM CP ISZ
   WR0
  4 LDM
   BPP XCH
   A SRC
   RD0
   RAR
   ML4 CARRY INV JCN
  A LD
   R0 XCH
   0 LDM
   R1 XCH
   CPLRT JMS
   STC
  $0F LDM
   A SRC
   WR3
LBL ML4  \ BA5
   RAL
   RF XCH
   B SRC
   RD0
   RAR
   ML6 CARRY INV JCN
  B LD
   R0 XCH
   0 LDM
   R1 XCH
   CPLRT JMS
   STC
  $0F LDM
   B SRC
   WR3
LBL ML6  \ BB6
   RAL
   CLC
   RF ADD
   C SRC
   WR0
LBL ML1  \ BBB
  B SRC
  RDM
  RF XCH
LBL ML2  \ BBE
   RF LD
   ML3 ZERO JCN
  DAC
   RF XCH
   5 LDM
   AP XCH
  CBASE LD
   CP XCH
   MADRT JMS
   ML2 JUN
LBL ML3  \ BCB
  CBASE INC
   ML1 BPP ISZ
  C SRC
   RD0
   RAR
   ML5 CARRY INV JCN
   0 LDM
   WR0
   R1 XCH
  C LD
   R0 XCH
   CPLRT JMS
LBL ML5  \ BDA
   A SRC
   RD3
   ML8 ZERO JCN
  A LD
   R0 XCH
   0 LDM
   R1 XCH
   CPLRT JMS
  0 LDM
   A SRC
   WR3
LBL ML8  \ BE7
  B SRC
   RD3
   ML7 ZERO JCN
  B LD
   R0 XCH
   0 LDM
   R1 XCH
   CPLRT JMS
\ BF1
  0 LDM
   B SRC
   WR3
LBL ML7  \ BF4
   0 BBL
\ SYN A AP B BPP C CP CBASE
\ BEGIN 3072
 $C00  ORG
\ SYN
\ R2 VALUE A
\ R3 VALUE AP
\ R3 VALUE CNT
\ R4 VALUE R
\ R5 VALUE RP
\ R6 VALUE C
\ R7 VALUE CP
\ R8 VALUE Q
\ R9 VALUE QP
\ RA VALUE NN
\ RB VALUE NP
\ RC VALUE K
\ RD VALUE KP
\ RE VALUE SHIFTA
\ RF VALUE SHIFTC

LBL MADRT  \ C00
  CLC
LBL STMAD  \ C01
   R2 SRC
   RDM
   R6 SRC
   ADM
   DAA
   WRM
  SKIPML R3 ISZ
   0 BBL
LBL SKIPML  \ C0A
  STMAD R7 ISZ
  0 BBL
\ DECIMAL DIVISION ROUTINE
\  WRITTEN  BY
\  G. A. KILDALL
\  ASSISTANT PROFESSOR
\  NAVAL POSTGRADUATE SCHOOL
\  MONTEREY, CALIFORNIA
LBL DECDIV \ C0D
   9 LDM
   A SRC
   WR2
   C SRC
   WR2
   Q SRC
   WR2
  CLB
LBL ZEROR  \ C15
   Q SRC
   WRM
   R SRC
   WRM
   RP INC
  ZEROR QP ISZ
  CLB
   NP XCH
 LBL LOCATEZERO  \ C1E
   NP LD
   CMA
   AP XCH
   A SRC
  RDM
  FOUNDZERO ZERO INV JCN
  LOCATEZERO NP ISZ
  ENDDIVIDE JUN
LBL FOUNDZERO  \ C29
   NP LD
   RP XCH
   CLB
   AP XCH
LBL COPYA  \ C20
   A SRC
   RDM
   R SRC
   WRM
   AP INC
  COPYA RP ISZ
  NP LD
   SHIFTA XCH
   A SRC
   RD2
   NP ADD
   NP XCH
   TCC
  NN XCH
  CLB
   KP XCH
LBL LOCATEZERO1 \ C3E
   KP LD
   CMA
   CP XCH
   C SRC
   RDM
  FOUNDZERO1 ZERO INV JCN
   LOCATEZERO1 KP ISZ
   1 BBL
LBL FOUNDZERO1 \ C48
   KP LD
   SHIFTC XCH
   RD2
   KP ADD
   KP XCH
  TCC
   KK XCH
  Q SRC
   RD2
   KP ADD
   KP XCH
   0 LDM
   KK ADD
   KK XCH
  CLC
   KP LD
   NP SUB
   QP XCH
   CMC
   KK LD
   NN SUB
  NOUNDERF CARRY JCN
   0 BBL
LBL NOUNDERF \ C60
  DOVERFLOW ZERO INV JCN
  15 LDM
   NP XCH
   C LD
   NN XCH
LBL COPYC1  \ C66
   C SRC
   RDM
   NN SRC
   WRM
  CP LD
   PASTCOPY1 ZERO JCN
   DAC
   CP XCH
  NP LD
   DAC
   NP XCH
   COPYC1 JUN
LBL PASTCOPY1  \ C74
   NP LD
   DIV ZERO JCN
  DAC
   NP XCH
   NN SRC
   0 LDM   \ ????
   WRM
  PASTCOPY1 JUN
LBL DIV  \ C7E
   10 LDM
   KK XCH
LBL SUB0  \ C80
  CLB
  CNT XCH
LBL SUB1   \ C82
   CLB
   RP XCH
   NP LD
   CP XCH
   R SRC
LBL SUB2  \ C87
   RDM
   C SRC   \ ?????
   SBM
   COMPLEMENT CARRY JCN
  KK ADD
   CLC
LBL COMPLEMENT  \ C8E
   CMC
   R SRC
   WRM
   RP INC
  R SRC
   SUB2 CP ISZ
  RP LD
   CHECKCARRY ZERO JCN
  RDM
   CP SUB
   WRM
   CMC
LBL CHECKCARRY  \ C9C
   CARRYOUT CARRY JCN
  CNT INC
   SUB1 JUN
LBL CARRYOUT  \ CA1
   NP LD
   CP XCH
   CLB
   RP XCH
LBL ADD4  \ CA5
   C SRC
   RDM
   R SRC
   ADM
   DAA
   WRM
   RP INC
  ADD4 CP ISZ
  RP LD
   SKIPADD ZERO JCN
   TCC
   R SRC
   ADM
   WRM
LBL SKIPADD  \ CB5
   Q SRC \ ?? Q
   CNT LD
   WRM
   QP LD  \ ?? Q
   ENDDIVIDE ZERO JCN
  DAC
   QP XCH
   SUB0 NP ISZ
LBL ENDDIVIDE  \ CBF
   CLB
   NP XCH
   SHIFTC LD
   CP XCH
LBL COPYC2  \ CC3
   C SRC
   RDM
   NN SRC
   WRM
   NP INC
  COPYC2 CP ISZ
  NP LD
   PASTFILL ZERO JCN
LBL FILLZ \ CCD
   NN SRC
   CLB
   WRM
   FILLZ NP ISZ
LBL PASTFILL  \ CD2
  0 BBL
LBL DOVERFLOW  \ CD3
  1 BBL
\ SYN A, AP,CNT,R,RP,C, CP ,Q,QP,N,NP,K KP,SHIFTA,SHIFTC
\ END  CD4

SAVE-ASM MANEUVER.BBN

